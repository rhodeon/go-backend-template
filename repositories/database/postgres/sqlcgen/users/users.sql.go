// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package users

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO public.users (
  username,
  first_name,
  last_name,
  email,
  phone_number,
  hashed_password
)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
)
RETURNING id, email, username, first_name, last_name, phone_number, is_verified, hashed_password, created_at, updated_at
`

type CreateParams struct {
	Username       string      `db:"username"`
	FirstName      string      `db:"first_name"`
	LastName       string      `db:"last_name"`
	Email          string      `db:"email"`
	PhoneNumber    pgtype.Text `db:"phone_number"`
	HashedPassword string      `db:"hashed_password"`
}

func (q *Queries) Create(ctx context.Context, db DBTX, arg CreateParams) (User, error) {
	row := db.QueryRow(ctx, create,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Email,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.IsVerified,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :one
DELETE
FROM public.users
WHERE id = $1
RETURNING id, email, username, first_name, last_name, phone_number, is_verified, hashed_password, created_at, updated_at
`

func (q *Queries) Delete(ctx context.Context, db DBTX, id int64) (User, error) {
	row := db.QueryRow(ctx, delete, id)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Email,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.IsVerified,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getByEmail = `-- name: GetByEmail :one
SELECT id, email, username, first_name, last_name, phone_number, is_verified, hashed_password, created_at, updated_at
FROM public.users
WHERE email = $1
`

func (q *Queries) GetByEmail(ctx context.Context, db DBTX, email string) (User, error) {
	row := db.QueryRow(ctx, getByEmail, email)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Email,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.IsVerified,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getById = `-- name: GetById :one
SELECT id, email, username, first_name, last_name, phone_number, is_verified, hashed_password, created_at, updated_at
FROM public.users
WHERE id = $1
`

func (q *Queries) GetById(ctx context.Context, db DBTX, id int64) (User, error) {
	row := db.QueryRow(ctx, getById, id)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Email,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.IsVerified,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE public.users
SET
  email = $1,
  username = $2
WHERE id = $3
RETURNING id, email, username, first_name, last_name, phone_number, is_verified, hashed_password, created_at, updated_at
`

type UpdateParams struct {
	Email    string `db:"email"`
	Username string `db:"username"`
	Id       int64  `db:"id"`
}

func (q *Queries) Update(ctx context.Context, db DBTX, arg UpdateParams) (User, error) {
	row := db.QueryRow(ctx, update, arg.Email, arg.Username, arg.Id)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Email,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.IsVerified,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const verify = `-- name: Verify :exec
UPDATE public.users
SET is_verified = TRUE
WHERE id = $1
`

func (q *Queries) Verify(ctx context.Context, db DBTX, id int64) error {
	_, err := db.Exec(ctx, verify, id)
	return err
}
