// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package users

import (
	"context"
)

const create = `-- name: Create :one
INSERT INTO users(email, username)
VALUES ($1, $2)
RETURNING id, username, email, created_at, updated_at
`

type CreateParams struct {
	Email    string `db:"email"`
	Username string `db:"username"`
}

func (q *Queries) Create(ctx context.Context, db DBTX, arg CreateParams) (User, error) {
	row := db.QueryRow(ctx, create, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :one
DELETE
FROM users
WHERE id = $1
RETURNING id, username, email, created_at, updated_at
`

func (q *Queries) Delete(ctx context.Context, db DBTX, id int32) (User, error) {
	row := db.QueryRow(ctx, delete, id)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getById = `-- name: GetById :one
SELECT id, username, email, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetById(ctx context.Context, db DBTX, id int32) (User, error) {
	row := db.QueryRow(ctx, getById, id)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT posts.id, posts.content, posts.user_id, posts.created_at, posts.updates_at
FROM users
         JOIN posts on users.id = posts.user_id
`

func (q *Queries) ListPosts(ctx context.Context, db DBTX) ([]Post, error) {
	rows, err := db.Query(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.Id,
			&i.Content,
			&i.UserId,
			&i.CreatedAt,
			&i.UpdatesAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :one
UPDATE users
SET email    = $1,
    username = $2
WHERE id = $3
RETURNING id, username, email, created_at, updated_at
`

type UpdateParams struct {
	Email    string `db:"email"`
	Username string `db:"username"`
	Id       int32  `db:"id"`
}

func (q *Queries) Update(ctx context.Context, db DBTX, arg UpdateParams) (User, error) {
	row := db.QueryRow(ctx, update, arg.Email, arg.Username, arg.Id)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
