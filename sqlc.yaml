version: "2"
sql:
  - engine: "postgresql"
    schema: ./cmd/migrations/schema
    queries: ./repositories/database/postgres/queries/pet_categories.sql
    rules:
        - sqlc/db-prepare
        - delete-without-where
        - update-without-where
    database:
        uri: 'postgresql://${SQLC_DB_USER}:${SQLC_DB_PASS}@${SQLC_DB_HOST}:${SQLC_DB_PORT}/${SQLC_DB_NAME}'
    gen:
      go:
        out: "./repositories/database/postgres/sqlcgen/petcategories"
        package: "petcategories"
        sql_package: "pgx/v5"
        omit_unused_structs: true
        emit_db_tags: true
        emit_empty_slices: true
        emit_methods_with_db_argument: true
        emit_interface: false
        initialisms: []

        overrides:
          - db_type: "uuid"
            nullable: false
            go_type:
              import: "github.com/google/uuid"
              type: "UUID"

          - db_type: "uuid"
            nullable: true
            go_type:
              import: "github.com/google/uuid"
              type: "NullUUID"

          - db_type: "timestamp"
            nullable: false
            go_type:
              import: "time"
              type: "Time"

          - db_type: "timestamptz"
            nullable: false
            go_type:
              import: "time"
              type: "Time"

  - engine: "postgresql"
    schema: ./cmd/migrations/schema
    queries: ./repositories/database/postgres/queries/pets.sql
    rules:
        - sqlc/db-prepare
        - delete-without-where
        - update-without-where
    database:
        uri: 'postgresql://${SQLC_DB_USER}:${SQLC_DB_PASS}@${SQLC_DB_HOST}:${SQLC_DB_PORT}/${SQLC_DB_NAME}'
    gen:
      go:
        out: "./repositories/database/postgres/sqlcgen/pets"
        package: "pets"
        sql_package: "pgx/v5"
        omit_unused_structs: true
        emit_db_tags: true
        emit_empty_slices: true
        emit_methods_with_db_argument: true
        emit_interface: false
        initialisms: []

        overrides:
          - db_type: "uuid"
            nullable: false
            go_type:
              import: "github.com/google/uuid"
              type: "UUID"

          - db_type: "uuid"
            nullable: true
            go_type:
              import: "github.com/google/uuid"
              type: "NullUUID"

          - db_type: "timestamp"
            nullable: false
            go_type:
              import: "time"
              type: "Time"

          - db_type: "timestamptz"
            nullable: false
            go_type:
              import: "time"
              type: "Time"

  - engine: "postgresql"
    schema: ./cmd/migrations/schema
    queries: ./repositories/database/postgres/queries/users.sql
    rules:
        - sqlc/db-prepare
        - delete-without-where
        - update-without-where
    database:
        uri: 'postgresql://${SQLC_DB_USER}:${SQLC_DB_PASS}@${SQLC_DB_HOST}:${SQLC_DB_PORT}/${SQLC_DB_NAME}'
    gen:
      go:
        out: "./repositories/database/postgres/sqlcgen/users"
        package: "users"
        sql_package: "pgx/v5"
        omit_unused_structs: true
        emit_db_tags: true
        emit_empty_slices: true
        emit_methods_with_db_argument: true
        emit_interface: false
        initialisms: []

        overrides:
          - db_type: "uuid"
            nullable: false
            go_type:
              import: "github.com/google/uuid"
              type: "UUID"

          - db_type: "uuid"
            nullable: true
            go_type:
              import: "github.com/google/uuid"
              type: "NullUUID"

          - db_type: "timestamp"
            nullable: false
            go_type:
              import: "time"
              type: "Time"

          - db_type: "timestamptz"
            nullable: false
            go_type:
              import: "time"
              type: "Time"

rules:
    - name: delete-without-where
      message: "DELETE statements must have a WHERE clause"
      rule: |
        (query.sql.startsWith("DELETE") || query.sql.startsWith("delete")) &&
        !(query.sql.contains('WHERE') || query.sql.contains('where'))

    - name: update-without-where
      message: "UPDATE statements must have a WHERE clause"
      rule: |
        (query.sql.startsWith("UPDATE") || query.sql.startsWith("update")) &&
        !(query.sql.contains('WHERE') || query.sql.contains('where'))
